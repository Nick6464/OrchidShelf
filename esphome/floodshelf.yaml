esphome:
  name: "floodshelf"
  friendly_name: Flood Irrigation Shelf
  min_version: 2025.8.0
  name_add_mac_suffix: false
  includes:
    - flood_helpers.h

esp32:
  board: esp32dev
  framework:
    type: arduino

# Enable logging
logger:
  level: INFO

# Enable Home Assistant API
api:

# Allow Over-The-Air updates
ota:
  - platform: esphome

wifi:
  ssid: !secret wifi_ssid
  password: !secret wifi_password

# Load VL6180X custom component
external_components:
  - source: github://Nick6464/vl6180x-esphome
    components: [ vl6180x ]

# I2C Buses for VL6180X sensors - one bus per sensor
i2c:
  - id: bus_bin_1
    sda: GPIO4
    scl: GPIO5
    scan: true
    frequency: 400kHz
  
  - id: bus_bin_2
    sda: GPIO13
    scl: GPIO14
    scan: true
    frequency: 400kHz
  
  - id: bus_bin_3
    sda: GPIO12
    scl: GPIO15
    scan: true
    frequency: 400kHz
  
  - id: bus_bin_4
    sda: GPIO2
    scl: GPIO0
    scan: true
    frequency: 400kHz

# Global variables for tracking bin states and last cycle times
globals:
  - id: pump_1_state
    type: std::string
    initial_value: '"Idle"'
  - id: pump_2_state
    type: std::string
    initial_value: '"Idle"'
  - id: pump_3_state
    type: std::string
    initial_value: '"Idle"'
  - id: pump_4_state
    type: std::string
    initial_value: '"Idle"'
  - id: pump_1_last_cycle
    type: int
    initial_value: '0'
  - id: pump_2_last_cycle
    type: int
    initial_value: '0'
  - id: pump_3_last_cycle
    type: int
    initial_value: '0'
  - id: pump_4_last_cycle
    type: int
    initial_value: '0'
  # Queue management
  - id: current_pump_sequence
    type: int
    initial_value: '1'
  - id: queue_pending_1
    type: bool
    initial_value: 'false'
  - id: queue_pending_2
    type: bool
    initial_value: 'false'
  - id: queue_pending_3
    type: bool
    initial_value: 'false'
  - id: queue_pending_4
    type: bool
    initial_value: 'false'
  # Next cycle timestamps
  - id: bin_1_next_cycle
    type: int
    initial_value: '0'
  - id: bin_2_next_cycle
    type: int
    initial_value: '0'
  - id: bin_3_next_cycle
    type: int
    initial_value: '0'
  - id: bin_4_next_cycle
    type: int
    initial_value: '0'
  # Schedule tracking
  - id: bin_1_last_run_day
    type: int
    restore_value: true
    initial_value: '0'
  - id: bin_2_last_run_day
    type: int
    restore_value: true
    initial_value: '0'
  - id: bin_3_last_run_day
    type: int
    restore_value: true
    initial_value: '0'
  - id: bin_4_last_run_day
    type: int
    restore_value: true
    initial_value: '0'
  # Schedule mode (0 = interval days, 1 = daily times)
  - id: bin_1_schedule_mode
    type: int
    restore_value: true
    initial_value: '0'
  - id: bin_2_schedule_mode
    type: int
    restore_value: true
    initial_value: '0'
  - id: bin_3_schedule_mode
    type: int
    restore_value: true
    initial_value: '0'
  - id: bin_4_schedule_mode
    type: int
    restore_value: true
    initial_value: '0'
  # Daily times strings
  - id: bin_1_daily_times_var
    type: std::string
    restore_value: true
    initial_value: '"10"'
  - id: bin_2_daily_times_var
    type: std::string
    restore_value: true
    initial_value: '"10"'
  - id: bin_3_daily_times_var
    type: std::string
    restore_value: true
    initial_value: '"10"'
  - id: bin_4_daily_times_var
    type: std::string
    restore_value: true
    initial_value: '"10"'
  # Interval time for each bin
  - id: bin_1_interval_time
    type: int
    restore_value: true
    initial_value: '10'
  - id: bin_2_interval_time
    type: int
    restore_value: true
    initial_value: '10'
  - id: bin_3_interval_time
    type: int
    restore_value: true
    initial_value: '10'
  - id: bin_4_interval_time
    type: int
    restore_value: true
    initial_value: '10'

# Define outputs for both HW-095 boards
output:
  # HW-095 Board #1 - Motor A (Pump 1)
  - platform: ledc
    pin: GPIO23
    id: motor_a_speed
    frequency: 1000Hz
  - platform: gpio
    pin: GPIO22
    id: motor_a_in1
  - platform: gpio
    pin: GPIO21
    id: motor_a_in2

  # HW-095 Board #1 - Motor B (Pump 2)
  - platform: ledc
    pin: GPIO19
    id: motor_b_speed
    frequency: 1000Hz
  - platform: gpio
    pin: GPIO18
    id: motor_b_in3
  - platform: gpio
    pin: GPIO17
    id: motor_b_in4

  # HW-095 Board #2 - Motor A (Pump 3)
  - platform: ledc
    pin: GPIO25
    id: motor_c_speed
    frequency: 1000Hz
  - platform: gpio
    pin: GPIO26
    id: motor_c_in1
  - platform: gpio
    pin: GPIO27
    id: motor_c_in2

  # HW-095 Board #2 - Motor B (Pump 4)
  - platform: ledc
    pin: GPIO32
    id: motor_d_speed
    frequency: 1000Hz
  - platform: gpio
    pin: GPIO33
    id: motor_d_in3
  - platform: gpio
    pin: GPIO16
    id: motor_d_in4

# VL6180X ToF Sensors for each bin - one per I2C bus
sensor:
  # Bin 1 Water Level Sensor
  - platform: vl6180x
    name: "Bin 1 Water Distance"
    id: bin_1_distance
    update_interval: 0.5s
    samples: 10
    address: 0x29
    i2c_id: bus_bin_1
    filters:
      - median:
          window_size: 5
          send_every: 1

  # Bin 2 Water Level Sensor
  - platform: vl6180x
    name: "Bin 2 Water Distance"
    id: bin_2_distance
    update_interval: 0.5s
    samples: 10
    address: 0x29
    i2c_id: bus_bin_2
    filters:
      - median:
          window_size: 5
          send_every: 1

  # Bin 3 Water Level Sensor
  - platform: vl6180x
    name: "Bin 3 Water Distance"
    id: bin_3_distance
    update_interval: 0.5s
    samples: 10
    address: 0x29
    i2c_id: bus_bin_3
    filters:
      - median:
          window_size: 5
          send_every: 1

  # Bin 4 Water Level Sensor
  - platform: vl6180x
    name: "Bin 4 Water Distance"
    id: bin_4_distance
    update_interval: 0.5s
    samples: 10
    address: 0x29
    i2c_id: bus_bin_4
    filters:
      - median:
          window_size: 5
          send_every: 1

# Create switch entities for all 4 pumps
switch:
  - platform: template
    name: "Peristaltic Pump 1"
    id: pump_1
    optimistic: true
    turn_on_action:
      - lambda: |-
          bool reverse = id(pump_1_reverse).state;
          std::string speed = reverse ? id(pump_1_drain_speed).state : id(pump_1_fill_speed).state;
          id(motor_a_speed)->set_level(speed_to_level(speed));
          id(motor_a_in1)->turn_off();
          id(motor_a_in2)->turn_off();
          (reverse ? id(motor_a_in2) : id(motor_a_in1))->turn_on();
    turn_off_action:
      - lambda: |-
          id(motor_a_in1)->turn_off();
          id(motor_a_in2)->turn_off();
          id(motor_a_speed)->set_level(0.0);

  - platform: template
    name: "Peristaltic Pump 2"
    id: pump_2
    optimistic: true
    turn_on_action:
      - lambda: |-
          bool reverse = id(pump_2_reverse).state;
          std::string speed = reverse ? id(pump_2_drain_speed).state : id(pump_2_fill_speed).state;
          id(motor_b_speed)->set_level(speed_to_level(speed));
          id(motor_b_in3)->turn_off();
          id(motor_b_in4)->turn_off();
          (reverse ? id(motor_b_in4) : id(motor_b_in3))->turn_on();
    turn_off_action:
      - lambda: |-
          id(motor_b_in3)->turn_off();
          id(motor_b_in4)->turn_off();
          id(motor_b_speed)->set_level(0.0);

  - platform: template
    name: "Peristaltic Pump 3"
    id: pump_3
    optimistic: true
    turn_on_action:
      - lambda: |-
          bool reverse = id(pump_3_reverse).state;
          std::string speed = reverse ? id(pump_3_drain_speed).state : id(pump_3_fill_speed).state;
          id(motor_c_speed)->set_level(speed_to_level(speed));
          id(motor_c_in1)->turn_off();
          id(motor_c_in2)->turn_off();
          (reverse ? id(motor_c_in2) : id(motor_c_in1))->turn_on();
    turn_off_action:
      - lambda: |-
          id(motor_c_in1)->turn_off();
          id(motor_c_in2)->turn_off();
          id(motor_c_speed)->set_level(0.0);

  - platform: template
    name: "Peristaltic Pump 4"
    id: pump_4
    optimistic: true
    turn_on_action:
      - lambda: |-
          bool reverse = id(pump_4_reverse).state;
          std::string speed = reverse ? id(pump_4_drain_speed).state : id(pump_4_fill_speed).state;
          id(motor_d_speed)->set_level(speed_to_level(speed));
          id(motor_d_in3)->turn_off();
          id(motor_d_in4)->turn_off();
          (reverse ? id(motor_d_in4) : id(motor_d_in3))->turn_on();
    turn_off_action:
      - lambda: |-
          id(motor_d_in3)->turn_off();
          id(motor_d_in4)->turn_off();
          id(motor_d_speed)->set_level(0.0);

  # Direction control switches for all pumps
  - platform: template
    name: "Pump 1 Reverse"
    id: pump_1_reverse
    optimistic: true
    turn_on_action:
      - if:
          condition:
            switch.is_on: pump_1
          then:
            - output.set_level:
                id: motor_a_speed
                level: !lambda |-
                  std::string speed = id(pump_1_drain_speed).state;
                  return speed_to_level(speed);
            - output.turn_off: motor_a_in1
            - output.turn_on: motor_a_in2
    turn_off_action:
      - if:
          condition:
            switch.is_on: pump_1
          then:
            - output.set_level:
                id: motor_a_speed
                level: !lambda |-
                  std::string speed = id(pump_1_fill_speed).state;
                  return speed_to_level(speed);
            - output.turn_on: motor_a_in1
            - output.turn_off: motor_a_in2

  - platform: template
    name: "Pump 2 Reverse"
    id: pump_2_reverse
    optimistic: true
    turn_on_action:
      - if:
          condition:
            switch.is_on: pump_2
          then:
            - output.set_level:
                id: motor_b_speed
                level: !lambda |-
                  std::string speed = id(pump_2_drain_speed).state;
                  return speed_to_level(speed);
            - output.turn_off: motor_b_in3
            - output.turn_on: motor_b_in4
    turn_off_action:
      - if:
          condition:
            switch.is_on: pump_2
          then:
            - output.set_level:
                id: motor_b_speed
                level: !lambda |-
                  std::string speed = id(pump_2_fill_speed).state;
                  return speed_to_level(speed);
            - output.turn_on: motor_b_in3
            - output.turn_off: motor_b_in4

  - platform: template
    name: "Pump 3 Reverse"
    id: pump_3_reverse
    optimistic: true
    turn_on_action:
      - if:
          condition:
            switch.is_on: pump_3
          then:
            - output.set_level:
                id: motor_c_speed
                level: !lambda |-
                  std::string speed = id(pump_3_drain_speed).state;
                  return speed_to_level(speed);
            - output.turn_off: motor_c_in1
            - output.turn_on: motor_c_in2
    turn_off_action:
      - if:
          condition:
            switch.is_on: pump_3
          then:
            - output.set_level:
                id: motor_c_speed
                level: !lambda |-
                  std::string speed = id(pump_3_fill_speed).state;
                  return speed_to_level(speed);
            - output.turn_on: motor_c_in1
            - output.turn_off: motor_c_in2

  - platform: template
    name: "Pump 4 Reverse"
    id: pump_4_reverse
    optimistic: true
    turn_on_action:
      - if:
          condition:
            switch.is_on: pump_4
          then:
            - output.set_level:
                id: motor_d_speed
                level: !lambda |-
                  std::string speed = id(pump_4_drain_speed).state;
                  return speed_to_level(speed);
            - output.turn_off: motor_d_in3
            - output.turn_on: motor_d_in4
    turn_off_action:
      - if:
          condition:
            switch.is_on: pump_4
          then:
            - output.set_level:
                id: motor_d_speed
                level: !lambda |-
                  std::string speed = id(pump_4_fill_speed).state;
                  return speed_to_level(speed);
            - output.turn_on: motor_d_in3
            - output.turn_off: motor_d_in4

  # Master switches
  - platform: template
    name: "All Pumps On/Off"
    id: all_pumps_master
    optimistic: true
    turn_on_action:
      - switch.turn_on: pump_1
      - switch.turn_on: pump_2
      - switch.turn_on: pump_3
      - switch.turn_on: pump_4
    turn_off_action:
      - switch.turn_off: pump_1
      - switch.turn_off: pump_2
      - switch.turn_off: pump_3
      - switch.turn_off: pump_4

  # Bin enable/disable switches
  - platform: template
    name: "Bin 1 Enable"
    id: bin_1_enable
    optimistic: true
    restore_mode: RESTORE_DEFAULT_ON
    icon: mdi:water-check
    
  - platform: template
    name: "Bin 2 Enable"
    id: bin_2_enable
    optimistic: true
    restore_mode: RESTORE_DEFAULT_ON
    icon: mdi:water-check
    
  - platform: template
    name: "Bin 3 Enable"
    id: bin_3_enable
    optimistic: true
    restore_mode: RESTORE_DEFAULT_ON
    icon: mdi:water-check
    
  - platform: template
    name: "Bin 4 Enable"
    id: bin_4_enable
    optimistic: true
    restore_mode: RESTORE_DEFAULT_ON
    icon: mdi:water-check

# Fill and drain speed selectors
select:
  - platform: template
    name: "Pump 1 Fill Speed"
    id: pump_1_fill_speed
    optimistic: true
    options:
      - "55%"
      - "65%"
      - "75%"
      - "85%"
      - "100%"
    initial_option: "65%"
    icon: mdi:gauge

  - platform: template
    name: "Pump 1 Drain Speed"
    id: pump_1_drain_speed
    optimistic: true
    options:
      - "55%"
      - "65%"
      - "75%"
      - "85%"
      - "100%"
    initial_option: "75%"
    icon: mdi:gauge

  - platform: template
    name: "Pump 2 Fill Speed"
    id: pump_2_fill_speed
    optimistic: true
    options:
      - "55%"
      - "65%"
      - "75%"
      - "85%"
      - "100%"
    initial_option: "65%"
    icon: mdi:gauge

  - platform: template
    name: "Pump 2 Drain Speed"
    id: pump_2_drain_speed
    optimistic: true
    options:
      - "55%"
      - "65%"
      - "75%"
      - "85%"
      - "100%"
    initial_option: "75%"
    icon: mdi:gauge

  - platform: template
    name: "Pump 3 Fill Speed"
    id: pump_3_fill_speed
    optimistic: true
    options:
      - "55%"
      - "65%"
      - "75%"
      - "85%"
      - "100%"
    initial_option: "65%"
    icon: mdi:gauge

  - platform: template
    name: "Pump 3 Drain Speed"
    id: pump_3_drain_speed
    optimistic: true
    options:
      - "55%"
      - "65%"
      - "75%"
      - "85%"
      - "100%"
    initial_option: "75%"
    icon: mdi:gauge

  - platform: template
    name: "Pump 4 Fill Speed"
    id: pump_4_fill_speed
    optimistic: true
    options:
      - "55%"
      - "65%"
      - "75%"
      - "85%"
      - "100%"
    initial_option: "65%"
    icon: mdi:gauge

  - platform: template
    name: "Pump 4 Drain Speed"
    id: pump_4_drain_speed
    optimistic: true
    options:
      - "55%"
      - "65%"
      - "75%"
      - "85%"
      - "100%"
    initial_option: "75%"
    icon: mdi:gauge

  # Schedule mode selectors
  - platform: template
    name: "Bin 1 Schedule Mode"
    id: bin_1_schedule_mode_select
    options:
      - "Interval Days"
      - "Daily Times"
    icon: mdi:calendar-clock
    lambda: |-
      return id(bin_1_schedule_mode) == 1 ? std::string("Daily Times") : std::string("Interval Days");
    set_action:
      then:
        - lambda: |-
            std::string mode = x;
            id(bin_1_schedule_mode) = (mode == "Daily Times") ? 1 : 0;

  - platform: template
    name: "Bin 2 Schedule Mode"
    id: bin_2_schedule_mode_select
    options:
      - "Interval Days"
      - "Daily Times"
    icon: mdi:calendar-clock
    lambda: |-
      return id(bin_2_schedule_mode) == 1 ? std::string("Daily Times") : std::string("Interval Days");
    set_action:
      then:
        - lambda: |-
            std::string mode = x;
            id(bin_2_schedule_mode) = (mode == "Daily Times") ? 1 : 0;

  - platform: template
    name: "Bin 3 Schedule Mode"
    id: bin_3_schedule_mode_select
    options:
      - "Interval Days"
      - "Daily Times"
    icon: mdi:calendar-clock
    lambda: |-
      return id(bin_3_schedule_mode) == 1 ? std::string("Daily Times") : std::string("Interval Days");
    set_action:
      then:
        - lambda: |-
            std::string mode = x;
            id(bin_3_schedule_mode) = (mode == "Daily Times") ? 1 : 0;

  - platform: template
    name: "Bin 4 Schedule Mode"
    id: bin_4_schedule_mode_select
    options:
      - "Interval Days"
      - "Daily Times"
    icon: mdi:calendar-clock
    lambda: |-
      return id(bin_4_schedule_mode) == 1 ? std::string("Daily Times") : std::string("Interval Days");
    set_action:
      then:
        - lambda: |-
            std::string mode = x;
            id(bin_4_schedule_mode) = (mode == "Daily Times") ? 1 : 0;

# Time component with scheduling
time:
  - platform: homeassistant
    id: homeassistant_time
    on_time:
      - seconds: 0
        minutes: 0
        then:
          - lambda: |-
              auto now = id(homeassistant_time).now();
              int current_hour = now.hour;
              int current_day = now.day_of_year;
              auto current_time = now.timestamp;
              
              // Check each bin for schedule matches
              for (int bin = 1; bin <= 4; bin++) {
                if (get_bin_enable(bin)) {
                  bool should_run = false;
                  int schedule_mode = 0;
                  
                  switch(bin) {
                    case 1: schedule_mode = id(bin_1_schedule_mode); break;
                    case 2: schedule_mode = id(bin_2_schedule_mode); break;
                    case 3: schedule_mode = id(bin_3_schedule_mode); break;
                    case 4: schedule_mode = id(bin_4_schedule_mode); break;
                  }
                  
                  if (schedule_mode == 0) {
                    // Interval Days mode
                    int last_run_day = 0;
                    switch(bin) {
                      case 1: last_run_day = id(bin_1_last_run_day); break;
                      case 2: last_run_day = id(bin_2_last_run_day); break;
                      case 3: last_run_day = id(bin_3_last_run_day); break;
                      case 4: last_run_day = id(bin_4_last_run_day); break;
                    }
                    
                    int days_since = 0;
                    if (last_run_day > 0) {
                      days_since = (current_day - last_run_day + 365) % 365;
                    }
                    
                    float interval_days = get_cycle_interval(bin);
                    int interval_time = 10;
                    switch(bin) {
                      case 1: interval_time = id(bin_1_interval_time); break;
                      case 2: interval_time = id(bin_2_interval_time); break;
                      case 3: interval_time = id(bin_3_interval_time); break;
                      case 4: interval_time = id(bin_4_interval_time); break;
                    }
                    
                    if (current_hour == interval_time && days_since >= (int)interval_days) {
                      should_run = true;
                    }
                  } else {
                    // Daily Times mode
                    std::string daily_times = "";
                    switch(bin) {
                      case 1: daily_times = id(ha_bin_1_daily_times).state; break;
                      case 2: daily_times = id(ha_bin_2_daily_times).state; break;
                      case 3: daily_times = id(ha_bin_3_daily_times).state; break;
                      case 4: daily_times = id(ha_bin_4_daily_times).state; break;
                    }
                    
                    std::stringstream ss(daily_times);
                    std::string time_str;
                    while (std::getline(ss, time_str, ',')) {
                      time_str.erase(0, time_str.find_first_not_of(" \t"));
                      time_str.erase(time_str.find_last_not_of(" \t") + 1);
                      if (!time_str.empty()) {
                        int time_hour = std::stoi(time_str);
                        if (current_hour == time_hour) {
                          should_run = true;
                          break;
                        }
                      }
                    }
                  }
                  
                  if (should_run) {
                    set_queue_pending(bin, true);
                    set_next_cycle_time(bin, current_time);
                    
                    if (schedule_mode == 0) {
                      switch(bin) {
                        case 1: id(bin_1_last_run_day) = current_day; break;
                        case 2: id(bin_2_last_run_day) = current_day; break;
                        case 3: id(bin_3_last_run_day) = current_day; break;
                        case 4: id(bin_4_last_run_day) = current_day; break;
                      }
                    }
                  }
                }
              }
              
              // Process queue - only if all pumps are idle
              if (are_all_pumps_idle()) {
                for (int bin = 1; bin <= 4; bin++) {
                  if (get_queue_pending(bin)) {
                    set_queue_pending(bin, false);
                    set_last_cycle(bin, now.timestamp);
                    execute_flood_cycle(bin);
                    break;
                  }
                }
              }

# Sensors and status
text_sensor:
  # Home Assistant input_text sensors for daily times
  - platform: homeassistant
    id: ha_bin_1_daily_times
    entity_id: input_text.floodshelf_bin_1_daily_times
    internal: true
  - platform: homeassistant
    id: ha_bin_2_daily_times
    entity_id: input_text.floodshelf_bin_2_daily_times
    internal: true
  - platform: homeassistant
    id: ha_bin_3_daily_times
    entity_id: input_text.floodshelf_bin_3_daily_times
    internal: true
  - platform: homeassistant
    id: ha_bin_4_daily_times
    entity_id: input_text.floodshelf_bin_4_daily_times
    internal: true

  # Bin status sensors
  - platform: template
    name: "Bin 1 Status"
    id: pump_1_status
    lambda: |-
      return get_pump_state(1);
    update_interval: 1s

  - platform: template
    name: "Bin 2 Status"
    id: pump_2_status
    lambda: |-
      return get_pump_state(2);
    update_interval: 1s

  - platform: template
    name: "Bin 3 Status"
    id: pump_3_status
    lambda: |-
      return get_pump_state(3);
    update_interval: 1s

  - platform: template
    name: "Bin 4 Status"
    id: pump_4_status
    lambda: |-
      return get_pump_state(4);
    update_interval: 1s

  # Countdown text sensors
  - platform: template
    name: "Bin 1 Next Cycle Countdown Text"
    id: pump_1_countdown_text
    icon: mdi:timer-sand
    update_interval: 60s
    lambda: |-
      return {calculate_countdown_text(1)};

  - platform: template
    name: "Bin 2 Next Cycle Countdown Text"
    id: pump_2_countdown_text
    icon: mdi:timer-sand
    update_interval: 60s
    lambda: |-
      return {calculate_countdown_text(2)};

  - platform: template
    name: "Bin 3 Next Cycle Countdown Text"
    id: pump_3_countdown_text
    icon: mdi:timer-sand
    update_interval: 60s
    lambda: |-
      return {calculate_countdown_text(3)};

  - platform: template
    name: "Bin 4 Next Cycle Countdown Text"
    id: pump_4_countdown_text
    icon: mdi:timer-sand
    update_interval: 60s
    lambda: |-
      return {calculate_countdown_text(4)};

  # Queue status
  - platform: template
    name: "Queue Status"
    id: queue_status_sensor
    icon: mdi:playlist-play
    lambda: |-
      std::string status = "";
      int count = 0;
      for (int bin = 1; bin <= 4; bin++) {
        if (get_queue_pending(bin)) { 
          status += "Bin " + std::to_string(bin) + ", "; 
          count++; 
        }
      }
      
      if (count == 0) return {"Empty"};
      if (status.length() > 2) status = status.substr(0, status.length() - 2);
      return {status};
    update_interval: 10s

# Depth and timing settings
number:
  # Bin 1 Settings
  - platform: template
    name: "Bin 1 Target Depth mm"
    id: bin_1_target_depth
    min_value: 5
    max_value: 150
    step: 5
    mode: box
    initial_value: 50
    optimistic: true
    icon: mdi:water-plus

  - platform: template
    name: "Bin 1 Empty Distance mm"
    id: bin_1_empty_distance
    min_value: 50
    max_value: 300
    step: 5
    mode: box
    initial_value: 200
    optimistic: true
    icon: mdi:ruler

  - platform: template
    name: "Bin 1 Max Fill Time Minutes"
    id: bin_1_max_fill_time
    min_value: 1
    max_value: 60
    step: 1
    mode: box
    initial_value: 15
    optimistic: true
    icon: mdi:timer-outline

  - platform: template
    name: "Bin 1 Soak Duration Minutes"
    id: pump_1_soak_duration
    min_value: 1
    max_value: 480
    step: 1
    mode: box
    initial_value: 60
    optimistic: true
    icon: mdi:timer-sand

  - platform: template
    name: "Bin 1 Cycle Interval Days"
    id: pump_1_cycle_interval
    min_value: 1
    max_value: 30
    step: 1
    mode: box
    initial_value: 5
    optimistic: true

  - platform: template
    name: "Bin 1 Interval Time Hour"
    id: pump_1_interval_time
    min_value: 0
    max_value: 23
    step: 1
    mode: box
    initial_value: 10
    optimistic: true

  # Bin 2 Settings
  - platform: template
    name: "Bin 2 Target Depth mm"
    id: bin_2_target_depth
    min_value: 5
    max_value: 150
    step: 5
    mode: box
    initial_value: 50
    optimistic: true
    icon: mdi:water-plus

  - platform: template
    name: "Bin 2 Empty Distance mm"
    id: bin_2_empty_distance
    min_value: 50
    max_value: 300
    step: 5
    mode: box
    initial_value: 200
    optimistic: true
    icon: mdi:ruler

  - platform: template
    name: "Bin 2 Max Fill Time Minutes"
    id: bin_2_max_fill_time
    min_value: 1
    max_value: 60
    step: 1
    mode: box
    initial_value: 15
    optimistic: true
    icon: mdi:timer-outline

  - platform: template
    name: "Bin 2 Soak Duration Minutes"
    id: pump_2_soak_duration
    min_value: 1
    max_value: 480
    step: 1
    mode: box
    initial_value: 60
    optimistic: true
    icon: mdi:timer-sand

  - platform: template
    name: "Bin 2 Cycle Interval Days"
    id: pump_2_cycle_interval
    min_value: 1
    max_value: 30
    step: 1
    mode: box
    initial_value: 5
    optimistic: true

  - platform: template
    name: "Bin 2 Interval Time Hour"
    id: pump_2_interval_time
    min_value: 0
    max_value: 23
    step: 1
    mode: box
    initial_value: 10
    optimistic: true

  # Bin 3 Settings
  - platform: template
    name: "Bin 3 Target Depth mm"
    id: bin_3_target_depth
    min_value: 5
    max_value: 150
    step: 5
    mode: box
    initial_value: 50
    optimistic: true
    icon: mdi:water-plus

  - platform: template
    name: "Bin 3 Empty Distance mm"
    id: bin_3_empty_distance
    min_value: 50
    max_value: 300
    step: 5
    mode: box
    initial_value: 200
    optimistic: true
    icon: mdi:ruler

  - platform: template
    name: "Bin 3 Max Fill Time Minutes"
    id: bin_3_max_fill_time
    min_value: 1
    max_value: 60
    step: 1
    mode: box
    initial_value: 15
    optimistic: true
    icon: mdi:timer-outline

  - platform: template
    name: "Bin 3 Soak Duration Minutes"
    id: pump_3_soak_duration
    min_value: 1
    max_value: 480
    step: 1
    mode: box
    initial_value: 60
    optimistic: true
    icon: mdi:timer-sand

  - platform: template
    name: "Bin 3 Cycle Interval Days"
    id: pump_3_cycle_interval
    min_value: 1
    max_value: 30
    step: 1
    mode: box
    initial_value: 5
    optimistic: true

  - platform: template
    name: "Bin 3 Interval Time Hour"
    id: pump_3_interval_time
    min_value: 0
    max_value: 23
    step: 1
    mode: box
    initial_value: 10
    optimistic: true

  # Bin 4 Settings
  - platform: template
    name: "Bin 4 Target Depth mm"
    id: bin_4_target_depth
    min_value: 5
    max_value: 150
    step: 5
    mode: box
    initial_value: 50
    optimistic: true
    icon: mdi:water-plus

  - platform: template
    name: "Bin 4 Empty Distance mm"
    id: bin_4_empty_distance
    min_value: 50
    max_value: 300
    step: 5
    mode: box
    initial_value: 200
    optimistic: true
    icon: mdi:ruler

  - platform: template
    name: "Bin 4 Max Fill Time Minutes"
    id: bin_4_max_fill_time
    min_value: 1
    max_value: 60
    step: 1
    mode: box
    initial_value: 15
    optimistic: true
    icon: mdi:timer-outline

  - platform: template
    name: "Bin 4 Soak Duration Minutes"
    id: pump_4_soak_duration
    min_value: 1
    max_value: 480
    step: 1
    mode: box
    initial_value: 60
    optimistic: true
    icon: mdi:timer-sand

  - platform: template
    name: "Bin 4 Cycle Interval Days"
    id: pump_4_cycle_interval
    min_value: 1
    max_value: 30
    step: 1
    mode: box
    initial_value: 5
    optimistic: true

  - platform: template
    name: "Bin 4 Interval Time Hour"
    id: pump_4_interval_time
    min_value: 0
    max_value: 23
    step: 1
    mode: box
    initial_value: 10
    optimistic: true

# Manual cycle buttons
button:
  - platform: template
    name: "Start Bin 1 Cycle"
    id: start_pump_1_cycle
    on_press:
      - lambda: |-
          auto current_time = id(homeassistant_time).now().timestamp;
          set_last_cycle(1, current_time);
          set_next_cycle_time(1, current_time);
          set_queue_pending(1, false);
      - script.execute: pump_1_flood_cycle

  - platform: template
    name: "Start Bin 2 Cycle"
    id: start_pump_2_cycle
    on_press:
      - lambda: |-
          auto current_time = id(homeassistant_time).now().timestamp;
          set_last_cycle(2, current_time);
          set_next_cycle_time(2, current_time);
          set_queue_pending(2, false);
      - script.execute: pump_2_flood_cycle

  - platform: template
    name: "Start Bin 3 Cycle"
    id: start_pump_3_cycle
    on_press:
      - lambda: |-
          auto current_time = id(homeassistant_time).now().timestamp;
          set_last_cycle(3, current_time);
          set_next_cycle_time(3, current_time);
          set_queue_pending(3, false);
      - script.execute: pump_3_flood_cycle

  - platform: template
    name: "Start Bin 4 Cycle"
    id: start_pump_4_cycle
    on_press:
      - lambda: |-
          auto current_time = id(homeassistant_time).now().timestamp;
          set_last_cycle(4, current_time);
          set_next_cycle_time(4, current_time);
          set_queue_pending(4, false);
      - script.execute: pump_4_flood_cycle

  - platform: template
    name: "Clear All Pending Cycles"
    id: clear_queue
    icon: mdi:playlist-remove
    on_press:
      - lambda: |-
          for (int bin = 1; bin <= 4; bin++) {
            set_queue_pending(bin, false);
          }

# Depth-based flood cycle scripts
script:
  - id: pump_1_flood_cycle
    mode: single
    then:
      - globals.set:
          id: pump_1_state
          value: '"Filling"'
      - logger.log: "Bin 1: Starting depth-based fill cycle"
      - switch.turn_on: pump_1_reverse
      - switch.turn_on: pump_1
      # Wait for target depth or max time
      - wait_until:
          timeout: !lambda "return (int)(id(bin_1_max_fill_time).state * 60 * 1000);"
          condition:
            lambda: |-
              float target = id(bin_1_target_depth).state;
              float current = calculate_water_depth(1, id(bin_1_distance).state);
              return current >= target;
      - switch.turn_off: pump_1
      - globals.set:
          id: pump_1_state
          value: '"Soaking"'
      - logger.log: "Bin 1: Target depth reached, soaking"
      - delay: !lambda "return (int)(id(pump_1_soak_duration).state * 60 * 1000);"
      - globals.set:
          id: pump_1_state
          value: '"Draining"'
      - logger.log: "Bin 1: Starting drain"
      - switch.turn_off: pump_1_reverse
      - switch.turn_on: pump_1
      # Drain until water is gone
      - wait_until:
          timeout: 20min
          condition:
            lambda: |-
              float empty_distance = id(bin_1_empty_distance).state;
              float current_distance = id(bin_1_distance).state;
              return current_distance >= (empty_distance - 5);
      - switch.turn_off: pump_1
      - switch.turn_off: pump_1_reverse
      - globals.set:
          id: pump_1_state
          value: '"Idle"'
      - logger.log: "Bin 1: Cycle complete"

  - id: pump_2_flood_cycle
    mode: single
    then:
      - globals.set:
          id: pump_2_state
          value: '"Filling"'
      - logger.log: "Bin 2: Starting depth-based fill cycle"
      - switch.turn_on: pump_2_reverse
      - switch.turn_on: pump_2
      - wait_until:
          timeout: !lambda "return (int)(id(bin_2_max_fill_time).state * 60 * 1000);"
          condition:
            lambda: |-
              float target = id(bin_2_target_depth).state;
              float current = calculate_water_depth(2, id(bin_1_distance).state);
              return current >= target;
      - switch.turn_off: pump_2
      - globals.set:
          id: pump_2_state
          value: '"Soaking"'
      - delay: !lambda "return (int)(id(pump_2_soak_duration).state * 60 * 1000);"
      - globals.set:
          id: pump_2_state
          value: '"Draining"'
      - switch.turn_off: pump_2_reverse
      - switch.turn_on: pump_2
      - wait_until:
          timeout: 20min
          condition:
            lambda: |-
              float empty_distance = id(bin_2_empty_distance).state;
              float current_distance = id(bin_1_distance).state;
              return current_distance >= (empty_distance - 5);
      - switch.turn_off: pump_2
      - switch.turn_off: pump_2_reverse
      - globals.set:
          id: pump_2_state
          value: '"Idle"'

  - id: pump_3_flood_cycle
    mode: single
    then:
      - globals.set:
          id: pump_3_state
          value: '"Filling"'
      - logger.log: "Bin 3: Starting depth-based fill cycle"
      - switch.turn_on: pump_3_reverse
      - switch.turn_on: pump_3
      - wait_until:
          timeout: !lambda "return (int)(id(bin_3_max_fill_time).state * 60 * 1000);"
          condition:
            lambda: |-
              float target = id(bin_3_target_depth).state;
              float current = calculate_water_depth(3, id(bin_1_distance).state);
              return current >= target;
      - switch.turn_off: pump_3
      - globals.set:
          id: pump_3_state
          value: '"Soaking"'
      - delay: !lambda "return (int)(id(pump_3_soak_duration).state * 60 * 1000);"
      - globals.set:
          id: pump_3_state
          value: '"Draining"'
      - switch.turn_off: pump_3_reverse
      - switch.turn_on: pump_3
      - wait_until:
          timeout: 20min
          condition:
            lambda: |-
              float empty_distance = id(bin_3_empty_distance).state;
              float current_distance = id(bin_1_distance).state;
              return current_distance >= (empty_distance - 5);
      - switch.turn_off: pump_3
      - switch.turn_off: pump_3_reverse
      - globals.set:
          id: pump_3_state
          value: '"Idle"'

  - id: pump_4_flood_cycle
    mode: single
    then:
      - globals.set:
          id: pump_4_state
          value: '"Filling"'
      - logger.log: "Bin 4: Starting depth-based fill cycle"
      - switch.turn_on: pump_4_reverse
      - switch.turn_on: pump_4
      - wait_until:
          timeout: !lambda "return (int)(id(bin_4_max_fill_time).state * 60 * 1000);"
          condition:
            lambda: |-
              float target = id(bin_4_target_depth).state;
              float current = calculate_water_depth(4, id(bin_1_distance).state);
              return current >= target;
      - switch.turn_off: pump_4
      - globals.set:
          id: pump_4_state
          value: '"Soaking"'
      - delay: !lambda "return (int)(id(pump_4_soak_duration).state * 60 * 1000);"
      - globals.set:
          id: pump_4_state
          value: '"Draining"'
      - switch.turn_off: pump_4_reverse
      - switch.turn_on: pump_4
      - wait_until:
          timeout: 20min
          condition:
            lambda: |-
              float empty_distance = id(bin_4_empty_distance).state;
              float current_distance = id(bin_1_distance).state;
              return current_distance >= (empty_distance - 5);
      - switch.turn_off: pump_4
      - switch.turn_off: pump_4_reverse
      - globals.set:
          id: pump_4_state
          value: '"Idle"'

