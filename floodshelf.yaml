esphome:
  name: "floodshelf"
  friendly_name: Flood Irrigation Shelf
  min_version: 2025.8.0
  name_add_mac_suffix: false

esp32:
  board: esp32dev
  framework:
    type: esp-idf

# Enable logging
logger:

# Enable Home Assistant API
api:

# Allow Over-The-Air updates
ota:
  - platform: esphome

wifi:
  ssid: !secret wifi_ssid
  password: !secret wifi_password

# Global variables for tracking bin states and last cycle times
globals:
  - id: pump_1_state
    type: std::string
    initial_value: '"Idle"'
  - id: pump_2_state
    type: std::string
    initial_value: '"Idle"'
  - id: pump_3_state
    type: std::string
    initial_value: '"Idle"'
  - id: pump_4_state
    type: std::string
    initial_value: '"Idle"'
  - id: pump_1_last_cycle
    type: int
    initial_value: '0'
  - id: pump_2_last_cycle
    type: int
    initial_value: '0'
  - id: pump_3_last_cycle
    type: int
    initial_value: '0'
  - id: pump_4_last_cycle
    type: int
    initial_value: '0'
  # Sequential pump queue management
  - id: current_pump_sequence
    type: int
    initial_value: '1'  # Start with pump 1

# Define outputs for both HW-095 boards
output:
  # HW-095 Board #1 - Motor A (Pump 1)
  - platform: ledc
    pin: GPIO23
    id: motor_a_speed
    frequency: 1000Hz
  - platform: gpio
    pin: GPIO22
    id: motor_a_in1
  - platform: gpio
    pin: GPIO21
    id: motor_a_in2

  # HW-095 Board #1 - Motor B (Pump 2)
  - platform: ledc
    pin: GPIO19
    id: motor_b_speed
    frequency: 1000Hz
  - platform: gpio
    pin: GPIO18
    id: motor_b_in3
  - platform: gpio
    pin: GPIO17
    id: motor_b_in4

  # HW-095 Board #2 - Motor A (Pump 3)
  - platform: ledc
    pin: GPIO25
    id: motor_c_speed
    frequency: 1000Hz
  - platform: gpio
    pin: GPIO26
    id: motor_c_in1
  - platform: gpio
    pin: GPIO27
    id: motor_c_in2

  # HW-095 Board #2 - Motor B (Pump 4)
  - platform: ledc
    pin: GPIO32
    id: motor_d_speed
    frequency: 1000Hz
  - platform: gpio
    pin: GPIO33
    id: motor_d_in3
  - platform: gpio
    pin: GPIO16
    id: motor_d_in4

# Create simple switch entities for all 4 pumps (65% fixed speed)
switch:
  - platform: template
    name: "Peristaltic Pump 1"
    id: pump_1
    optimistic: true
    turn_on_action:
      - output.set_level:
          id: motor_a_speed
          level: !lambda |-
            std::string speed = id(pump_1_reverse).state ? id(pump_1_drain_speed).state : id(pump_1_fill_speed).state;
            if (speed == "55%") return 0.55;
            if (speed == "65%") return 0.65;
            if (speed == "75%") return 0.75;
            if (speed == "85%") return 0.85;
            if (speed == "100%") return 1.0;
            return 0.65; // default
      - if:
          condition:
            switch.is_on: pump_1_reverse
          then:
            - output.turn_off: motor_a_in1
            - output.turn_on: motor_a_in2
          else:
            - output.turn_on: motor_a_in1
            - output.turn_off: motor_a_in2
    turn_off_action:
      - output.turn_off: motor_a_in1
      - output.turn_off: motor_a_in2
      - output.set_level:
          id: motor_a_speed
          level: 0.0

  - platform: template
    name: "Peristaltic Pump 2"
    id: pump_2
    optimistic: true
    turn_on_action:
      - output.set_level:
          id: motor_b_speed
          level: !lambda |-
            std::string speed = id(pump_2_reverse).state ? id(pump_2_drain_speed).state : id(pump_2_fill_speed).state;
            if (speed == "55%") return 0.55;
            if (speed == "65%") return 0.65;
            if (speed == "75%") return 0.75;
            if (speed == "85%") return 0.85;
            if (speed == "100%") return 1.0;
            return 0.65; // default
      - if:
          condition:
            switch.is_on: pump_2_reverse
          then:
            - output.turn_off: motor_b_in3
            - output.turn_on: motor_b_in4
          else:
            - output.turn_on: motor_b_in3
            - output.turn_off: motor_b_in4
    turn_off_action:
      - output.turn_off: motor_b_in3
      - output.turn_off: motor_b_in4
      - output.set_level:
          id: motor_b_speed
          level: 0.0

  - platform: template
    name: "Peristaltic Pump 3"
    id: pump_3
    optimistic: true
    turn_on_action:
      - output.set_level:
          id: motor_c_speed
          level: !lambda |-
            std::string speed = id(pump_3_reverse).state ? id(pump_3_drain_speed).state : id(pump_3_fill_speed).state;
            if (speed == "55%") return 0.55;
            if (speed == "65%") return 0.65;
            if (speed == "75%") return 0.75;
            if (speed == "85%") return 0.85;
            if (speed == "100%") return 1.0;
            return 0.65; // default
      - if:
          condition:
            switch.is_on: pump_3_reverse
          then:
            - output.turn_off: motor_c_in1
            - output.turn_on: motor_c_in2
          else:
            - output.turn_on: motor_c_in1
            - output.turn_off: motor_c_in2
    turn_off_action:
      - output.turn_off: motor_c_in1
      - output.turn_off: motor_c_in2
      - output.set_level:
          id: motor_c_speed
          level: 0.0

  - platform: template
    name: "Peristaltic Pump 4"
    id: pump_4
    optimistic: true
    turn_on_action:
      - output.set_level:
          id: motor_d_speed
          level: !lambda |-
            std::string speed = id(pump_4_reverse).state ? id(pump_4_drain_speed).state : id(pump_4_fill_speed).state;
            if (speed == "55%") return 0.55;
            if (speed == "65%") return 0.65;
            if (speed == "75%") return 0.75;
            if (speed == "85%") return 0.85;
            if (speed == "100%") return 1.0;
            return 0.65; // default
      - if:
          condition:
            switch.is_on: pump_4_reverse
          then:
            - output.turn_off: motor_d_in3
            - output.turn_on: motor_d_in4
          else:
            - output.turn_on: motor_d_in3
            - output.turn_off: motor_d_in4
    turn_off_action:
      - output.turn_off: motor_d_in3
      - output.turn_off: motor_d_in4
      - output.set_level:
          id: motor_d_speed
          level: 0.0

  # Direction control switches for all pumps
  - platform: template
    name: "Pump 1 Reverse"
    id: pump_1_reverse
    optimistic: true
    turn_on_action:
      - if:
          condition:
            switch.is_on: pump_1
          then:
            - output.set_level:
                id: motor_a_speed
                level: !lambda |-
                  std::string speed = id(pump_1_drain_speed).state;
                  if (speed == "55%") return 0.55;
                  if (speed == "65%") return 0.65;
                  if (speed == "75%") return 0.75;
                  if (speed == "85%") return 0.85;
                  if (speed == "100%") return 1.0;
                  return 0.75;
            - output.turn_off: motor_a_in1
            - output.turn_on: motor_a_in2
    turn_off_action:
      - if:
          condition:
            switch.is_on: pump_1
          then:
            - output.set_level:
                id: motor_a_speed
                level: !lambda |-
                  std::string speed = id(pump_1_fill_speed).state;
                  if (speed == "55%") return 0.55;
                  if (speed == "65%") return 0.65;
                  if (speed == "75%") return 0.75;
                  if (speed == "85%") return 0.85;
                  if (speed == "100%") return 1.0;
                  return 0.65;
            - output.turn_on: motor_a_in1
            - output.turn_off: motor_a_in2

  - platform: template
    name: "Pump 2 Reverse"
    id: pump_2_reverse
    optimistic: true
    turn_on_action:
      - if:
          condition:
            switch.is_on: pump_2
          then:
            - output.set_level:
                id: motor_b_speed
                level: !lambda |-
                  std::string speed = id(pump_2_drain_speed).state;
                  if (speed == "55%") return 0.55;
                  if (speed == "65%") return 0.65;
                  if (speed == "75%") return 0.75;
                  if (speed == "85%") return 0.85;
                  if (speed == "100%") return 1.0;
                  return 0.75;
            - output.turn_off: motor_b_in3
            - output.turn_on: motor_b_in4
    turn_off_action:
      - if:
          condition:
            switch.is_on: pump_2
          then:
            - output.set_level:
                id: motor_b_speed
                level: !lambda |-
                  std::string speed = id(pump_2_fill_speed).state;
                  if (speed == "55%") return 0.55;
                  if (speed == "65%") return 0.65;
                  if (speed == "75%") return 0.75;
                  if (speed == "85%") return 0.85;
                  if (speed == "100%") return 1.0;
                  return 0.65;
            - output.turn_on: motor_b_in3
            - output.turn_off: motor_b_in4

  - platform: template
    name: "Pump 3 Reverse"
    id: pump_3_reverse
    optimistic: true
    turn_on_action:
      - if:
          condition:
            switch.is_on: pump_3
          then:
            - output.set_level:
                id: motor_c_speed
                level: !lambda |-
                  std::string speed = id(pump_3_drain_speed).state;
                  if (speed == "55%") return 0.55;
                  if (speed == "65%") return 0.65;
                  if (speed == "75%") return 0.75;
                  if (speed == "85%") return 0.85;
                  if (speed == "100%") return 1.0;
                  return 0.75;
            - output.turn_off: motor_c_in1
            - output.turn_on: motor_c_in2
    turn_off_action:
      - if:
          condition:
            switch.is_on: pump_3
          then:
            - output.set_level:
                id: motor_c_speed
                level: !lambda |-
                  std::string speed = id(pump_3_fill_speed).state;
                  if (speed == "55%") return 0.55;
                  if (speed == "65%") return 0.65;
                  if (speed == "75%") return 0.75;
                  if (speed == "85%") return 0.85;
                  if (speed == "100%") return 1.0;
                  return 0.65;
            - output.turn_on: motor_c_in1
            - output.turn_off: motor_c_in2

  - platform: template
    name: "Pump 4 Reverse"
    id: pump_4_reverse
    optimistic: true
    turn_on_action:
      - if:
          condition:
            switch.is_on: pump_4
          then:
            - output.set_level:
                id: motor_d_speed
                level: !lambda |-
                  std::string speed = id(pump_4_drain_speed).state;
                  if (speed == "55%") return 0.55;
                  if (speed == "65%") return 0.65;
                  if (speed == "75%") return 0.75;
                  if (speed == "85%") return 0.85;
                  if (speed == "100%") return 1.0;
                  return 0.75;
            - output.turn_off: motor_d_in3
            - output.turn_on: motor_d_in4
    turn_off_action:
      - if:
          condition:
            switch.is_on: pump_4
          then:
            - output.set_level:
                id: motor_d_speed
                level: !lambda |-
                  std::string speed = id(pump_4_fill_speed).state;
                  if (speed == "55%") return 0.55;
                  if (speed == "65%") return 0.65;
                  if (speed == "75%") return 0.75;
                  if (speed == "85%") return 0.85;
                  if (speed == "100%") return 1.0;
                  return 0.65;
            - output.turn_on: motor_d_in3
            - output.turn_off: motor_d_in4

  # Master switches
  - platform: template
    name: "All Pumps On/Off"
    id: all_pumps_master
    optimistic: true
    turn_on_action:
      - switch.turn_on: pump_1
      - switch.turn_on: pump_2
      - switch.turn_on: pump_3
      - switch.turn_on: pump_4
    turn_off_action:
      - switch.turn_off: pump_1
      - switch.turn_off: pump_2
      - switch.turn_off: pump_3
      - switch.turn_off: pump_4

  # Bin enable/disable switches for sequential cycling (also controls auto scheduling)
  - platform: template
    name: "Bin 1 Enable"
    id: bin_1_enable
    optimistic: true
    restore_mode: RESTORE_DEFAULT_ON
    icon: mdi:water-check
    
  - platform: template
    name: "Bin 2 Enable"
    id: bin_2_enable
    optimistic: true
    restore_mode: RESTORE_DEFAULT_ON
    icon: mdi:water-check
    
  - platform: template
    name: "Bin 3 Enable"
    id: bin_3_enable
    optimistic: true
    restore_mode: RESTORE_DEFAULT_ON
    icon: mdi:water-check
    
  - platform: template
    name: "Bin 4 Enable"
    id: bin_4_enable
    optimistic: true
    restore_mode: RESTORE_DEFAULT_ON
    icon: mdi:water-check

# Fill and drain speed selectors for each pump
select:
  - platform: template
    name: "Pump 1 Fill Speed"
    id: pump_1_fill_speed
    optimistic: true
    options:
      - "55%"
      - "65%"
      - "75%"
      - "85%"
      - "100%"
    initial_option: "65%"
    icon: mdi:gauge

  - platform: template
    name: "Pump 1 Drain Speed"
    id: pump_1_drain_speed
    optimistic: true
    options:
      - "55%"
      - "65%"
      - "75%"
      - "85%"
      - "100%"
    initial_option: "75%"
    icon: mdi:gauge

  - platform: template
    name: "Pump 2 Fill Speed"
    id: pump_2_fill_speed
    optimistic: true
    options:
      - "55%"
      - "65%"
      - "75%"
      - "85%"
      - "100%"
    initial_option: "65%"
    icon: mdi:gauge

  - platform: template
    name: "Pump 2 Drain Speed"
    id: pump_2_drain_speed
    optimistic: true
    options:
      - "55%"
      - "65%"
      - "75%"
      - "85%"
      - "100%"
    initial_option: "75%"
    icon: mdi:gauge

  - platform: template
    name: "Pump 3 Fill Speed"
    id: pump_3_fill_speed
    optimistic: true
    options:
      - "55%"
      - "65%"
      - "75%"
      - "85%"
      - "100%"
    initial_option: "65%"
    icon: mdi:gauge

  - platform: template
    name: "Pump 3 Drain Speed"
    id: pump_3_drain_speed
    optimistic: true
    options:
      - "55%"
      - "65%"
      - "75%"
      - "85%"
      - "100%"
    initial_option: "75%"
    icon: mdi:gauge

  - platform: template
    name: "Pump 4 Fill Speed"
    id: pump_4_fill_speed
    optimistic: true
    options:
      - "55%"
      - "65%"
      - "75%"
      - "85%"
      - "100%"
    initial_option: "65%"
    icon: mdi:gauge

  - platform: template
    name: "Pump 4 Drain Speed"
    id: pump_4_drain_speed
    optimistic: true
    options:
      - "55%"
      - "65%"
      - "75%"
      - "85%"
      - "100%"
    initial_option: "75%"
    icon: mdi:gauge


# Time component for automation
time:
  - platform: homeassistant
    id: homeassistant_time

# Interval-based scheduling for automatic cycles - sequential operation at configurable hour
interval:
  - interval: 60s
    then:
      - lambda: |-
          // Sequential pump scheduling - only one pump runs at a time, only at configured hour
          auto now = id(homeassistant_time).now();
          auto current_time = now.timestamp;
          
          // Only check for cycles at configured hour (Home Assistant should handle timezone)
          if (now.hour != (int)id(watering_hour).state) {
            return;
          }
          
          // Check if all pumps are idle before starting next cycle
          bool all_pumps_idle = (id(pump_1_state) == "Idle" && 
                                id(pump_2_state) == "Idle" && 
                                id(pump_3_state) == "Idle" && 
                                id(pump_4_state) == "Idle");
          
          // Only proceed if all pumps are idle
          if (!all_pumps_idle) {
            return;
          }
          
          // Check pumps in sequence starting from current_pump_sequence
          int attempts = 0;
          while (attempts < 4) {  // Prevent infinite loop
            int current_pump = id(current_pump_sequence);
            bool pump_started = false;
            
            // Check the current pump in sequence (bin enable and auto schedule are now linked)
            if (current_pump == 1 && 
                id(bin_1_enable).state &&
                current_time - id(pump_1_last_cycle) >= (int)(id(pump_1_cycle_interval).state * 86400)) {
              id(pump_1_flood_cycle).execute();
              id(pump_1_last_cycle) = current_time;
              pump_started = true;
            }
            else if (current_pump == 2 && 
                     id(bin_2_enable).state &&
                     current_time - id(pump_2_last_cycle) >= (int)(id(pump_2_cycle_interval).state * 86400)) {
              id(pump_2_flood_cycle).execute();
              id(pump_2_last_cycle) = current_time;
              pump_started = true;
            }
            else if (current_pump == 3 && 
                     id(bin_3_enable).state &&
                     current_time - id(pump_3_last_cycle) >= (int)(id(pump_3_cycle_interval).state * 86400)) {
              id(pump_3_flood_cycle).execute();
              id(pump_3_last_cycle) = current_time;
              pump_started = true;
            }
            else if (current_pump == 4 && 
                     id(bin_4_enable).state &&
                     current_time - id(pump_4_last_cycle) >= (int)(id(pump_4_cycle_interval).state * 86400)) {
              id(pump_4_flood_cycle).execute();
              id(pump_4_last_cycle) = current_time;
              pump_started = true;
            }
            
            // Move to next pump in sequence
            id(current_pump_sequence) = (current_pump >= 4) ? 1 : current_pump + 1;
            
            // If we started a pump, we're done
            if (pump_started) {
              break;
            }
            
            attempts++;
          }


# Sensors for countdown and status
sensor:
  - platform: template
    name: "Bin 1 Next Cycle Countdown"
    id: pump_1_countdown
    icon: mdi:timer-sand
    update_interval: 60s
    lambda: |-
      if (!id(bin_1_enable).state) {
        return NAN; // Return NAN when disabled
      }
      
      auto now = id(homeassistant_time).now();
      auto current_time = now.timestamp;
      auto configured_hour = (int)id(watering_hour).state;
      
      // Calculate time until next watering hour
      auto current_tm = *localtime(&current_time);
      time_t target_time;
      
      if (current_tm.tm_hour < configured_hour) {
        // Next watering is today at configured hour
        current_tm.tm_hour = configured_hour;
        current_tm.tm_min = 0;
        current_tm.tm_sec = 0;
        target_time = mktime(&current_tm);
      } else {
        // Next watering is tomorrow at configured hour
        target_time = current_time + ((24 - current_tm.tm_hour + configured_hour) * 3600) - (current_tm.tm_min * 60) - current_tm.tm_sec;
      }
      
      // Return hours until next watering time
      auto time_diff = target_time - current_time;
      return time_diff / 3600.0; // Convert to hours
    unit_of_measurement: "hours"

  - platform: template
    name: "Bin 2 Next Cycle Countdown"
    id: pump_2_countdown
    icon: mdi:timer-sand
    update_interval: 60s
    lambda: |-
      if (!id(bin_2_enable).state) {
        return NAN;
      }
      
      auto now = id(homeassistant_time).now();
      auto current_time = now.timestamp;
      auto configured_hour = (int)id(watering_hour).state;
      
      // Calculate time until next watering hour
      auto current_tm = *localtime(&current_time);
      time_t target_time;
      
      if (current_tm.tm_hour < configured_hour) {
        // Next watering is today at configured hour
        current_tm.tm_hour = configured_hour;
        current_tm.tm_min = 0;
        current_tm.tm_sec = 0;
        target_time = mktime(&current_tm);
      } else {
        // Next watering is tomorrow at configured hour
        target_time = current_time + ((24 - current_tm.tm_hour + configured_hour) * 3600) - (current_tm.tm_min * 60) - current_tm.tm_sec;
      }
      
      // Return hours until next watering time
      auto time_diff = target_time - current_time;
      return time_diff / 3600.0; // Convert to hours
    unit_of_measurement: "hours"

  - platform: template
    name: "Bin 3 Next Cycle Countdown"
    id: pump_3_countdown
    icon: mdi:timer-sand
    update_interval: 60s
    lambda: |-
      if (!id(bin_3_enable).state) {
        return NAN;
      }
      
      auto now = id(homeassistant_time).now();
      auto current_time = now.timestamp;
      auto configured_hour = (int)id(watering_hour).state;
      
      // Calculate time until next watering hour
      auto current_tm = *localtime(&current_time);
      time_t target_time;
      
      if (current_tm.tm_hour < configured_hour) {
        // Next watering is today at configured hour
        current_tm.tm_hour = configured_hour;
        current_tm.tm_min = 0;
        current_tm.tm_sec = 0;
        target_time = mktime(&current_tm);
      } else {
        // Next watering is tomorrow at configured hour
        target_time = current_time + ((24 - current_tm.tm_hour + configured_hour) * 3600) - (current_tm.tm_min * 60) - current_tm.tm_sec;
      }
      
      // Return hours until next watering time
      auto time_diff = target_time - current_time;
      return time_diff / 3600.0; // Convert to hours
    unit_of_measurement: "hours"

  - platform: template
    name: "Bin 4 Next Cycle Countdown"
    id: pump_4_countdown
    icon: mdi:timer-sand
    update_interval: 60s
    lambda: |-
      if (!id(bin_4_enable).state) {
        return NAN;
      }
      
      auto now = id(homeassistant_time).now();
      auto current_time = now.timestamp;
      auto configured_hour = (int)id(watering_hour).state;
      
      // Calculate time until next watering hour
      auto current_tm = *localtime(&current_time);
      time_t target_time;
      
      if (current_tm.tm_hour < configured_hour) {
        // Next watering is today at configured hour
        current_tm.tm_hour = configured_hour;
        current_tm.tm_min = 0;
        current_tm.tm_sec = 0;
        target_time = mktime(&current_tm);
      } else {
        // Next watering is tomorrow at configured hour
        target_time = current_time + ((24 - current_tm.tm_hour + configured_hour) * 3600) - (current_tm.tm_min * 60) - current_tm.tm_sec;
      }
      
      // Return hours until next watering time
      auto time_diff = target_time - current_time;
      return time_diff / 3600.0; // Convert to hours
    unit_of_measurement: "hours"

# Text sensors for bin status
text_sensor:
  - platform: template
    name: "Bin 1 Status"
    id: pump_1_status
    lambda: |-
      return id(pump_1_state);
    update_interval: 1s

  - platform: template
    name: "Bin 2 Status"
    id: pump_2_status
    lambda: |-
      return id(pump_2_state);
    update_interval: 1s

  - platform: template
    name: "Bin 3 Status"
    id: pump_3_status
    lambda: |-
      return id(pump_3_state);
    update_interval: 1s

  - platform: template
    name: "Bin 4 Status"
    id: pump_4_status
    lambda: |-
      return id(pump_4_state);
    update_interval: 1s

# Pump timing settings only (speed is fixed at 65%)
number:
  # Pump 1 Timing Settings
  - platform: template
    name: "Bin 1 Fill Duration Minutes"
    id: pump_1_fill_duration
    min_value: 1
    max_value: 60
    step: 1
    mode: box
    initial_value: 5
    optimistic: true

  - platform: template
    name: "Bin 1 Soak Duration Minutes"
    id: pump_1_soak_duration
    min_value: 1
    max_value: 120
    step: 1
    mode: box
    initial_value: 30
    optimistic: true

  - platform: template
    name: "Bin 1 Drain Duration Minutes"
    id: pump_1_drain_duration
    min_value: 1
    max_value: 60
    step: 1
    mode: box
    initial_value: 10
    optimistic: true

  - platform: template
    name: "Bin 1 Cycle Interval Days"
    id: pump_1_cycle_interval
    min_value: 1
    max_value: 30
    step: 1
    mode: box
    initial_value: 1
    optimistic: true

  # Bin 2 Timing Settings
  - platform: template
    name: "Bin 2 Fill Duration Minutes"
    id: pump_2_fill_duration
    min_value: 1
    max_value: 60
    step: 1
    mode: box
    initial_value: 5
    optimistic: true

  - platform: template
    name: "Bin 2 Soak Duration Minutes"
    id: pump_2_soak_duration
    min_value: 1
    max_value: 120
    step: 1
    mode: box
    initial_value: 30
    optimistic: true

  - platform: template
    name: "Bin 2 Drain Duration Minutes"
    id: pump_2_drain_duration
    min_value: 1
    max_value: 60
    step: 1
    mode: box
    initial_value: 10
    optimistic: true

  - platform: template
    name: "Bin 2 Cycle Interval Days"
    id: pump_2_cycle_interval
    min_value: 1
    max_value: 30
    step: 1
    mode: box
    initial_value: 1
    optimistic: true

  # Bin 3 Timing Settings
  - platform: template
    name: "Bin 3 Fill Duration Minutes"
    id: pump_3_fill_duration
    min_value: 1
    max_value: 60
    step: 1
    mode: box
    initial_value: 5
    optimistic: true

  - platform: template
    name: "Bin 3 Soak Duration Minutes"
    id: pump_3_soak_duration
    min_value: 1
    max_value: 120
    step: 1
    mode: box
    initial_value: 30
    optimistic: true

  - platform: template
    name: "Bin 3 Drain Duration Minutes"
    id: pump_3_drain_duration
    min_value: 1
    max_value: 60
    step: 1
    mode: box
    initial_value: 10
    optimistic: true

  - platform: template
    name: "Bin 3 Cycle Interval Days"
    id: pump_3_cycle_interval
    min_value: 1
    max_value: 30
    step: 1
    mode: box
    initial_value: 1
    optimistic: true

  # Bin 4 Timing Settings
  - platform: template
    name: "Bin 4 Fill Duration Minutes"
    id: pump_4_fill_duration
    min_value: 1
    max_value: 60
    step: 1
    mode: box
    initial_value: 5
    optimistic: true

  - platform: template
    name: "Bin 4 Soak Duration Minutes"
    id: pump_4_soak_duration
    min_value: 1
    max_value: 120
    step: 1
    mode: box
    initial_value: 30
    optimistic: true

  - platform: template
    name: "Bin 4 Drain Duration Minutes"
    id: pump_4_drain_duration
    min_value: 1
    max_value: 60
    step: 1
    mode: box
    initial_value: 10
    optimistic: true

  - platform: template
    name: "Bin 4 Cycle Interval Days"
    id: pump_4_cycle_interval
    min_value: 1
    max_value: 30
    step: 1
    mode: box
    initial_value: 1
    optimistic: true

  # Global watering time setting
  - platform: template
    name: "Daily Watering Hour (24h format)"
    id: watering_hour
    min_value: 0
    max_value: 23
    step: 1
    mode: box
    initial_value: 9
    optimistic: true

# Manual cycle buttons
button:
  - platform: template
    name: "Start Bin 1 Cycle"
    id: start_pump_1_cycle
    on_press:
      - lambda: "id(pump_1_last_cycle) = id(homeassistant_time).now().timestamp;"
      - script.execute: pump_1_flood_cycle

  - platform: template
    name: "Start Bin 2 Cycle"
    id: start_pump_2_cycle
    on_press:
      - lambda: "id(pump_2_last_cycle) = id(homeassistant_time).now().timestamp;"
      - script.execute: pump_2_flood_cycle

  - platform: template
    name: "Start Bin 3 Cycle"
    id: start_pump_3_cycle
    on_press:
      - lambda: "id(pump_3_last_cycle) = id(homeassistant_time).now().timestamp;"
      - script.execute: pump_3_flood_cycle

  - platform: template
    name: "Start Bin 4 Cycle"
    id: start_pump_4_cycle
    on_press:
      - lambda: "id(pump_4_last_cycle) = id(homeassistant_time).now().timestamp;"
      - script.execute: pump_4_flood_cycle

# Scripts for flood cycles
script:
  - id: pump_1_flood_cycle
    then:
      - globals.set:
          id: pump_1_state
          value: '"Filling"'
      - switch.turn_on: pump_1_reverse
      - switch.turn_on: pump_1
      - delay: !lambda "return (int)(id(pump_1_fill_duration).state * 60 * 1000);"
      - switch.turn_off: pump_1
      - globals.set:
          id: pump_1_state
          value: '"Soaking"'
      - delay: !lambda "return (int)(id(pump_1_soak_duration).state * 60 * 1000);"
      - globals.set:
          id: pump_1_state
          value: '"Draining"'
      - switch.turn_off: pump_1_reverse
      - switch.turn_on: pump_1
      - delay: !lambda "return (int)(id(pump_1_drain_duration).state * 60 * 1000);"
      - switch.turn_off: pump_1
      - switch.turn_off: pump_1_reverse
      - globals.set:
          id: pump_1_state
          value: '"Idle"'

  - id: pump_2_flood_cycle
    then:
      - globals.set:
          id: pump_2_state
          value: '"Filling"'
      - switch.turn_on: pump_2_reverse
      - switch.turn_on: pump_2
      - delay: !lambda "return (int)(id(pump_2_fill_duration).state * 60 * 1000);"
      - switch.turn_off: pump_2
      - globals.set:
          id: pump_2_state
          value: '"Soaking"'
      - delay: !lambda "return (int)(id(pump_2_soak_duration).state * 60 * 1000);"
      - globals.set:
          id: pump_2_state
          value: '"Draining"'
      - switch.turn_off: pump_2_reverse
      - switch.turn_on: pump_2
      - delay: !lambda "return (int)(id(pump_2_drain_duration).state * 60 * 1000);"
      - switch.turn_off: pump_2
      - switch.turn_off: pump_2_reverse
      - globals.set:
          id: pump_2_state
          value: '"Idle"'

  - id: pump_3_flood_cycle
    then:
      - globals.set:
          id: pump_3_state
          value: '"Filling"'
      - switch.turn_on: pump_3_reverse
      - switch.turn_on: pump_3
      - delay: !lambda "return (int)(id(pump_3_fill_duration).state * 60 * 1000);"
      - switch.turn_off: pump_3
      - globals.set:
          id: pump_3_state
          value: '"Soaking"'
      - delay: !lambda "return (int)(id(pump_3_soak_duration).state * 60 * 1000);"
      - globals.set:
          id: pump_3_state
          value: '"Draining"'
      - switch.turn_off: pump_3_reverse
      - switch.turn_on: pump_3
      - delay: !lambda "return (int)(id(pump_3_drain_duration).state * 60 * 1000);"
      - switch.turn_off: pump_3
      - switch.turn_off: pump_3_reverse
      - globals.set:
          id: pump_3_state
          value: '"Idle"'

  - id: pump_4_flood_cycle
    then:
      - globals.set:
          id: pump_4_state
          value: '"Filling"'
      - switch.turn_on: pump_4_reverse
      - switch.turn_on: pump_4
      - delay: !lambda "return (int)(id(pump_4_fill_duration).state * 60 * 1000);"
      - switch.turn_off: pump_4
      - globals.set:
          id: pump_4_state
          value: '"Soaking"'
      - delay: !lambda "return (int)(id(pump_4_soak_duration).state * 60 * 1000);"
      - globals.set:
          id: pump_4_state
          value: '"Draining"'
      - switch.turn_off: pump_4_reverse
      - switch.turn_on: pump_4
      - delay: !lambda "return (int)(id(pump_4_drain_duration).state * 60 * 1000);"
      - switch.turn_off: pump_4
      - switch.turn_off: pump_4_reverse
      - globals.set:
          id: pump_4_state
          value: '"Idle"'
